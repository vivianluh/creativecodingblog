<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/creative-coding-blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/creative-coding-blog/" rel="alternate" type="text/html" /><updated>2022-08-19T11:12:21+10:00</updated><id>http://localhost:4000/creative-coding-blog/feed.xml</id><title type="html">vivian luh</title><subtitle>This is my creative coding blog that documents my journey  through discovering and learning new coding concepts, developing  assignment ideas, and displaying these findings.</subtitle><entry><title type="html">HEY</title><link href="http://localhost:4000/creative-coding-blog/jekyll/update/2022/08/12/HEY.html" rel="alternate" type="text/html" title="HEY" /><published>2022-08-12T14:43:10+10:00</published><updated>2022-08-12T14:43:10+10:00</updated><id>http://localhost:4000/creative-coding-blog/jekyll/update/2022/08/12/HEY</id><content type="html" xml:base="http://localhost:4000/creative-coding-blog/jekyll/update/2022/08/12/HEY.html"></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/creative-coding-blog/jekyll/update/2022/08/12/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2022-08-12T14:43:10+10:00</published><updated>2022-08-12T14:43:10+10:00</updated><id>http://localhost:4000/creative-coding-blog/jekyll/update/2022/08/12/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/creative-coding-blog/jekyll/update/2022/08/12/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Tom&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &apos;Hi, Tom&apos; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">Javascript Concepts</title><link href="http://localhost:4000/creative-coding-blog/jekyll/update/2022/08/12/javascript-concepts.html" rel="alternate" type="text/html" title="Javascript Concepts" /><published>2022-08-12T14:43:10+10:00</published><updated>2022-08-12T14:43:10+10:00</updated><id>http://localhost:4000/creative-coding-blog/jekyll/update/2022/08/12/javascript-concepts</id><content type="html" xml:base="http://localhost:4000/creative-coding-blog/jekyll/update/2022/08/12/javascript-concepts.html">&lt;p&gt;During the beginning of my creative coding journey, I decided to unpack a variety of different Javascript concepts, ready to be utilised in p5. To do this, I summarised each concept exposed during the class lectures in my own words while also referring to a variety of online tutorials, such as through &lt;a href=&quot;https://www.youtube.com/c/TheCodingTrain&quot;&gt;the coding train&lt;/a&gt; and &lt;a href=&quot;https://www.youtube.com/c/WilliamRaymondPM&quot;&gt;Bill Raymond&lt;/a&gt;. In turn, this has helped me immensely to wrap my head around key Javascript concepts :blush:&lt;/p&gt;

&lt;h1 id=&quot;variables&quot;&gt;Variables&lt;/h1&gt;
&lt;p&gt;In my own words, I have discovered that variables are a named key word that stores some sought of information, data, or value. Like ‘function’ you can assign whatever name to a variable by declaring it through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let__()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/etc/images/variables.png&quot; alt=&quot;variables diagram&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;functions&quot;&gt;Functions&lt;/h1&gt;
&lt;p&gt;I would utilise functions to categorise actions, or things we want to happen in a way that is divided from each other in a structured way, however when combined become a package. I believe functions are easy when you want to test different actions in a concise manner in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;function__()&lt;/code&gt;. Like variables, you can also define a function however you want.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/etc/images/functions.png&quot; alt=&quot;blogception&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;classes&quot;&gt;Classes&lt;/h1&gt;
&lt;p&gt;I would describe a class a template with the idea to encapsulate the idea of data and functionality into an object. In some sense, ‘class’ allows us to describe what it means to be that object. Different to functions, functions is like a behaviour, to  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;move&lt;/code&gt;, to  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bounce&lt;/code&gt;, or to  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;display&lt;/code&gt; for that object, while classes are like blueprints of that object.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/etc/images/classes.png&quot; alt=&quot;blogception&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;conditional-logic&quot;&gt;Conditional Logic&lt;/h1&gt;
&lt;p&gt;Another phrase to describe Conditional Logic is through the Boolean Expression, which conveys the meaning that something is either true or false/1 or 0. By adding conditional logic operations to your code, you can invite more interactivity onto the page. For example, on your piece of code, if you state that something is true, this will be the consequence of that truth, it will appear after that code is ran.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/etc/images/conditionallogic.png&quot; alt=&quot;blogception&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;arrays&quot;&gt;Arrays&lt;/h1&gt;
&lt;p&gt;When thinking about interactivity on a larger scale, arrays can be utilised to invite this. To me, Arrays are lists of values that allow you to refer to a variety of values, data, and information.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/etc/images/arrays.png&quot; alt=&quot;blogception&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">During the beginning of my creative coding journey, I decided to unpack a variety of different Javascript concepts, ready to be utilised in p5. To do this, I summarised each concept exposed during the class lectures in my own words while also referring to a variety of online tutorials, such as through the coding train and Bill Raymond. In turn, this has helped me immensely to wrap my head around key Javascript concepts :blush:</summary></entry></feed>